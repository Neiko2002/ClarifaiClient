package com.clarifai;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

/**
 * A Clarifai API authentication token.
 * 
 * @author Nico Hezel
 *
 */
public class ClarifaiToken {

	protected String access_token;
	protected int expires_in;
	protected String scope;
	protected String token_type;
	protected LocalDateTime validUntil; 
	
	private ClarifaiToken() {}
	
	/**
	 * Starts/Updates the expiration time.
	 * The time is set to now + expires_in - 10 seconds
	 * The reduced 10 seconds serve as a buffer.
	 */
	protected void updateValidUntil() {
		this.validUntil = LocalDateTime.now().plusSeconds(expires_in - 10);
	}
	
	/**
	 * Is the token already expired
	 * 
	 * @return
	 */
	public boolean isExpired() {
		return LocalDateTime.now().isAfter(validUntil);
	}

	/**
	 * The header for further requests
	 * 
	 * @return
	 * @throws TokenExpiredException
	 */
	public Header getHeader() throws TokenExpiredException {
		if(isExpired())
			throw new TokenExpiredException(this);
			
		return new BasicHeader("Authorization", token_type+" "+access_token);
	}

	/**
	 * The access token generated by the Clarifai API
	 * 
	 * @return
	 */
	public String getAccessToken() {
		return access_token;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("access_token:");
		sb.append(access_token);
		sb.append('\n');
		sb.append("token_type:");
		sb.append(token_type);
		sb.append('\n');
		sb.append("expires_in:");
		sb.append(expires_in);
		sb.append('\n');
		sb.append("scope:");
		sb.append(scope);
		sb.append('\n');
		sb.append("valid until:");
		sb.append(validUntil.toString());
		sb.append('\n');
		return super.toString();
	}
	
	/**
	 * Parse the json response from the REST API.
	 * Format: {"access_token": "xxxx", "token_type": "Bearer", "expires_in": 36000, "scope": "api_access"}
	 * 
	 * @param json
	 * @return
	 */
	protected static ClarifaiToken parse(String json) {
		ClarifaiToken token = ClarifaiClient.gson.fromJson(json, ClarifaiToken.class);
		token.updateValidUntil();
		return token;
	}
	
	/**
	 * Request a new Clarifai token for a specific client id
	 * {@link https://developer.clarifai.com/docs/auth}
	 * 
	 * @param client
	 * @param clientId
	 * @param clientSecret
	 * @return
	 * @throws IOException 
	 * @throws ClientProtocolException 
	 * @throws Exception
	 */
	public static ClarifaiToken request(HttpClient client, String clientId, String clientSecret) throws ClientProtocolException, IOException {
		
		HttpPost request = new HttpPost(ClarifaiClient.TOKEN_URL);
		 
		// add POST data
		List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();
		urlParameters.add(new BasicNameValuePair("grant_type", "client_credentials"));
		urlParameters.add(new BasicNameValuePair("client_id", clientId));
		urlParameters.add(new BasicNameValuePair("client_secret", clientSecret));
		request.setEntity(new UrlEncodedFormEntity(urlParameters));
		
		// Send request and get response
		HttpResponse response = client.execute(request);
		
		// create a java object from the response 	
		return ClarifaiToken.parse(EntityUtils.toString(response.getEntity()));
	}
}
